spring.application.name=demo
spring.datasource.url=jdbc:mysql://localhost:3306/demo?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


# Let Flyway handle schema migrations
spring.flyway.enabled=false
spring.flyway.locations=classpath:db/migration


# Optional: let jOOQ know dialect
spring.jooq.sql-dialect=MYSQL

app.name=Demo Application
app.version=1.0.0
app.max-users=100
app.description=This is a demo Spring Boot application


# Set active profile
spring.profiles.active=dev


spring.data.mongodb.uri=mongodb+srv://freemongodb:bgHvNVzqr32PpQZl@freecluster.4m5syjb.mongodb.net
spring.data.mongodb.database=springboot



redis.host=redis-14837.crce179.ap-south-1-1.ec2.redns.redis-cloud.com
redis.port=14837
redis.password=t4Tz7vzog27Z8QH3TyH0qOH2k4u3PqS7


# Folder to save uploaded files
file.upload-dir=uploads


# Expose all actuator endpoints
management.endpoints.web.exposure.include=*

info.app.name=MyApp
info.app.version=1.0.0
info.app.description=Spring Boot Actuator Demo

# ==============================
# KAFKA CONFIGURATION
# ==============================

# Kafka bootstrap server
spring.kafka.bootstrap-servers=kafka-193eb08d-vooratarun-f078.g.aivencloud.com:16329

# SECURITY (Aiven requires SSL)
spring.kafka.properties.security.protocol=SSL
spring.kafka.properties.ssl.truststore.type=PEM
spring.kafka.properties.ssl.truststore.location=classpath:ssl/ca.pem
spring.kafka.properties.ssl.keystore.type=PEM
spring.kafka.properties.ssl.keystore.certificate.chain=classpath:ssl/service.cert
spring.kafka.properties.ssl.keystore.key=classpath:ssl/service.key


# Consumer configuration
spring.kafka.consumer.group-id=my-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Producer configuration
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# Optional: enable idempotent producer (safe producer)
spring.kafka.producer.properties.enable.idempotence=true

spring.kafka.listener.missing-topics-fatal=false


# Optional: logging
logging.level.org.springframework.kafka=INFO
logging.level.org.apache.kafka=INFO
